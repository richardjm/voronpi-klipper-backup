
####################################################################
#          Display LCD and WLED Controls
#
# Don't forget to also copy wled.cfg
####################################################################

# Set LCD RGB at startup
[delayed_gcode RESETRGB_ONSTARTUP]
initial_duration: 10
gcode:
    # The long delay it to ensure that moonraker has time to register the set_wled remote command
    RESETRGB

##  Set RGB values on boot up for each Neopixel. 
##  Index 1 = display, Index 2 and 3 = Knob (not correct for my voronpi 2.4)
##  Index 3 = display, Index 1 and 2 = Knob

[gcode_macro RESETRGB]
description: Default RGB for display and printer lights
gcode:
    # Comment out these line if not using a btt_mini12864
    SET_LED LED=btt_mini12864 RED=1 GREEN=0.45 BLUE=0.4 INDEX=1 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=2 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=3
    # Low power lights on (having issues with undervoltage)
    DIM_LIGHTS
    # Do the fancy "on" animation
    # _LIGHTS_FLICKER
    # Finally Turn on the sb lights
    # SET_LED LED=neo_sb WHITE=0.5

# Comment out this macro if not using a btt_mini12864
[gcode_macro LCDRGB]
description: Example LCDRGB R=1 G=0 B=0, controls the display
gcode:
    {% set R = params.R|default(1)|float %}
    {% set G = params.G|default(1)|float %}
    {% set B = params.B|default(1)|float %}

    SET_LED LED=btt_mini12864 RED={R} GREEN={G} BLUE={B} INDEX=1 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED={R} GREEN={G} BLUE={B} INDEX=2 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED={R} GREEN={G} BLUE={B} INDEX=3 TRANSMIT=1

[gcode_macro DIM_LIGHTS]
description: Set lights to a dim preset
gcode:
    LIGHTS PS=47
    # SET_LED LED=neo_sb WHITE=0.5

# Keywords can be identified in M117 commands e.g. "Printing has been completed" == 'complete'
[gcode_macro _status_presets]
description: Maps keywords (case insensitive) in M117 commands to wled presets
variable_off: -99
variable_lookup: {
        'off': -99,       # equivalent to not set in WLED
        'ready': 45,      # if you see the word "ready" apply preset 45
        'busy':  43,      # if you see the word "busy" apply preset 43
        'heating': 41,    # if you see the word "heating" apply preset 41
        'leveling': 40,   # etc... add more states/presets to match your WLED setup
        'homing': 40,
        'cleaning': 40,
        'meshing': 40,
        'calibrating z': 40,
        'printing': 46,
        'complete': 42,
        'load': 43
    }
gcode:
    # Do nothing
    
[gcode_macro LIGHTS]
description: Example LIGHTS R=1 G=0 B=0 or LIGHTS PS=4 or e.g. LIGHTS STATUS=printing
gcode:
    {% set R = params.R|default(1)|float %}
    {% set G = params.G|default(1)|float %}
    {% set B = params.B|default(1)|float %}
    {% set PS = params.PS|default(-1)|int %}
    {% set STATUS = params.STATUS|default('')|string %}
    
    # Identify a preset from the STATUS (overrides PS parameter)
    {% if STATUS != '' %}
        {% set PS = printer["gcode_macro _status_presets"].lookup[STATUS] %}
    {% endif %}
    
    # Turn lights off, to a preset or to a specific colour
    {% if PS == printer["gcode_macro _status_presets"].off %}
        LIGHTS_OFF
    {% elif PS >= 0 %}
        WLED_ON PRESET={PS}
    {% else %}
        SET_WLED RED={R} GREEN={G} BLUE={B} TRANSMIT=1
    {% endif %}

[gcode_macro LIGHTS_OFF]
description: WLED lights and LCD lights off
gcode:
    WLED_OFF
    # SET_LED LED=neo_sb WHITE=0
    # LCDRGB R=0 G=0 B=0

# For M117 messages looks for the _status_presets strings in increasing priority order
# in the message, a status determined to be printing will perform a M117 to allow printing
# progress status to be displayed on the LCD
[gcode_macro M117]
rename_existing: M117.1
gcode:
    {% set ns = namespace(printing=false) %}
    
    # Check if M117 is empty - back to ready status (after a few seconds to let movements finish)
    {% if rawparams|trim == '' %}
        UPDATE_DELAYED_GCODE ID=_lights_ready DURATION=3
    {% else %}
        # Look for status names in message text
        {% for key, value in printer["gcode_macro _status_presets"].lookup.items() %}
             {% if key.upper() in rawparams.upper() %}
                 UPDATE_DELAYED_GCODE ID=_lights_ready DURATION=0
                 LIGHTS STATUS='{key}'            # could also use value as PS=

                 {% if key == 'printing' %}
                    {% set ns.printing=true %}
                 {% elif ns.printing %}
                    {% set ns.printing=false %}
                 {% endif %}
             {% endif %}
        {% endfor %}
    {% endif %}
    
    # Don't show a 'printing' message so that status updates on the lcd
    {% if ns.printing %}
        M117.1
    {% else %}
        M117.1 {rawparams}
    {% endif %}

[delayed_gcode _lights_ready]
gcode:
    LIGHTS STATUS=ready

###############################
# TimBot99 neat "turn-on" macro
[gcode_macro _LIGHTS_FLICKER]
gcode:
    {% set LEDTimes = [10, 20, 20, 240, 20, 40, 20, 100, 20, 20, 20, 260, 80, 20, 240, 60, 160, 20, 240, 20, 1000, 20, 20, 40, 100, 20, 274, 340, 860, 20, 1400, 20, 60, 20] %}
    # Target colour is a warm white
    {% set R = 255/255 %}
    {% set G = 191/255 %}
    {% set B = 130/255 %}

    {% for toggletime in LEDTimes %}
      {% set ledTime = toggletime|string %}
      {% set loopCount = loop.index %}

      {% if loopCount is divisibleby 2 %} # If the loop index is divisible by 2 (first index is NOT so the LEd should turn ON)
        SET_WLED RED={R} GREEN={G} BLUE={B} TRANSMIT=1
        G4 P{ledTime|int}
      {% else %}
        SET_WLED RED=0 GREEN=0 BLUE=0 TRANSMIT=1
        G4 P{ledTime|int}
      {% endif %}

    {% endfor %}
